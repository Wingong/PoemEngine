import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import QtQuick.Controls.Material 2.15
import Qt.labs.settings


Window {
    id: root
    width: 480
    height: 640

    property int text_default_height: 32

    Material.theme: Material.System
    Material.accent: Material.LightBlue

    visible: true
    title: qsTr("ËØóÂè•Ê£ÄÁ¥¢")

    // property string c_title : model.col0
    // property string c_author: model.col1
    // property string c_ju    : model.col2
    // property string c_yan   : model.col3
    // property string c_jushu : model.col4
    // property string c_ticai : model.col5
    // property string c_juind : model.col6
    // property string c_pz    : model.col7
    // property string c_id    : model.col8

    property var trDict: {
        "ËØóÂè•": qsTr("ËØóÂè•"),
        "Âπ≥‰ªÑ": qsTr("Âπ≥‰ªÑ"),
        "ËØóÈ¢ò": qsTr("ËØóÈ¢ò"),
        "‰ΩúËÄÖ": qsTr("‰ΩúËÄÖ"),
        "Ë®ÄÊï∞": qsTr("Ë®ÄÊï∞"),
        "Âè•Êï∞": qsTr("Âè•Êï∞"),
        "‰ΩìË£Å": qsTr("‰ΩìË£Å"),
        "Âè•Â∫è": qsTr("Âè•Â∫è")
    }

    property var colDict: {
        "ËØóÂè•": 2,
        "Âπ≥‰ªÑ": 7,
        "ËØóÈ¢ò": 0,
        "‰ΩúËÄÖ": 1,
        "Ë®ÄÊï∞": 3,
        "Âè•Êï∞": 4,
        "‰ΩìË£Å": 5,
        "Âè•Â∫è": 6
    }

    Settings {
        id: settings
        category: "UserPreferences"
        property string languageCode    : ""
        property int    theme           : 0
        property bool   strict_ju       : false
        property bool   strict_pz       : false
        property bool   strict_title    : true
        property bool   strict_author   : true
        property bool   strict_ticai    : true
        property int    sort1           : 3
        property bool   asc1            : true
        property int    sort2           : 2
        property bool   asc2            : true
        property int    sort3           : 7
        property bool   asc3            : true
        property bool   disp_pz         : true
        property bool   search_fanjian  : true
        // property
    }

    Component.onCompleted: {
        console.error(appSettings.languageCode)
        interf.setLanguage(appSettings.languageCode)
    }

    Connections {
        target: interf
        onPoemResultReceived: (poem) => {
            popup_Poem.poem  = poem
            popup_Poem.open()
        }
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 16
        spacing: 12

        // È°∂ÈÉ®ÊêúÁ¥¢Ê†è
        RowLayout {
            Layout.fillWidth: true
            spacing: 8

            Label {
                text: trDict["ËØóÈ¢ò"]
            }

            TextField {
                id: inputTitle
                topPadding: 0
                bottomPadding: 0
                Layout.fillWidth: true
                placeholderText: qsTr("ÈÄÅÊùúÂ∞ëÂ∫ú‰πã‰ªªËúÄÂ∑û")
                Layout.preferredHeight: root.text_default_height
            }

            Label {
                text: trDict["Ë®ÄÊï∞"]
            }

            TextField {
                id: inputYan
                topPadding: 0
                bottomPadding: 0
                leftPadding: 10
                rightPadding: 10
                placeholderText: "5,7"
                Layout.preferredHeight: root.text_default_height
                Layout.preferredWidth: 60
            }

            Label {
                text: trDict["Âè•Êï∞"]
                horizontalAlignment: Text.AlignRight
            }

            TextField {
                id: inputJushu
                topPadding: 0
                bottomPadding: 0
                leftPadding: 10
                rightPadding: 10
                placeholderText: "8-9"
                Layout.preferredHeight: root.text_default_height
                Layout.preferredWidth: 60

            }
        }
        // È°∂ÈÉ®ÊêúÁ¥¢Ê†è
        RowLayout {
            Layout.fillWidth: true
            spacing: 8

            Label {
                text: trDict["‰ΩúËÄÖ"]
            }

            TextField {
                id: inputAuthor
                topPadding: 0
                bottomPadding: 0
                Layout.fillWidth: true
                placeholderText: qsTr("ÁôΩÂ±ÖÊòì")
                Layout.preferredHeight: root.text_default_height

            }

            Label {
                text: trDict["‰ΩìË£Å"]
            }

            TextField {
                id: inputTicai
                topPadding: 0
                bottomPadding: 0
                leftPadding: 10
                rightPadding: 10
                placeholderText: qsTr("ÂæãËØó")
                Layout.preferredHeight: root.text_default_height
                Layout.preferredWidth: 60

            }

            Label {
                text: trDict["Âè•Â∫è"]
            }

            TextField {
                id: inputJuind
                topPadding: 0
                bottomPadding: 0
                leftPadding: 10
                rightPadding: 10
                placeholderText: "1,3,5"
                Layout.preferredHeight: root.text_default_height
                Layout.preferredWidth: 60

            }

        }

        // È°∂ÈÉ®ÊêúÁ¥¢Ê†è
        RowLayout {
            Layout.fillWidth: true
            spacing: 8

            Label {
                text: trDict["ËØóÂè•"]
            }

            TextField {
                id: inputJu
                topPadding: 0
                bottomPadding: 0
                Layout.fillWidth: true
                placeholderText: qsTr("Â±±Èö®Âπ≥ÈáéÈóä")
                Layout.preferredHeight: root.text_default_height

            }

            Label {
                text: trDict["Âπ≥‰ªÑ"]
            }

            TextField {
                id: inputPz
                topPadding: 0
                bottomPadding: 0
                Layout.fillWidth: true
                placeholderText: qsTr("‰ªÑÂπ≥Âπ≥‰ªÑ‰ªÑ")
                Layout.preferredHeight: root.text_default_height

            }

            Button {
                flat: true
                text: "üîç"
                font.family: "Noto Emoji"
                font.pixelSize: 23
                topPadding: 0
                bottomPadding: 0
                leftPadding: 0
                rightPadding: 0
                Layout.preferredWidth: root.text_default_height+12
                Layout.preferredHeight: root.text_default_height
                onClicked: {
                    // Ë∞ÉÁî® C++ ÊêúÁ¥¢ÈÄªËæë
                    interf.query(inputJu.text,
                                 inputPz.text,
                                 inputTitle.text,
                                 inputAuthor.text,
                                 inputYan.text,
                                 inputJushu.text,
                                 inputTicai.text,
                                 inputJuind.text)
                    // poemManager.query(searchInput.text)
                }
                // Layout.preferredWidth: 60
            }
        }

        // Ê®°Âºè + ÈÄâÈ°πÂå∫
        // ColumnLayout {
        //     spacing: 6

        //     RowLayout {
        //         Label { text: qsTr("Êü•ËØ¢Ê®°Âºè") }
        //         ComboBox {
        //             id: modeSelect
        //             model: [qsTr("ÂÖ®ÈÉ®"), trDict["ËØóÂè•"], trDict["Âπ≥‰ªÑ"]]
        //             Layout.preferredHeight: root.text_default_height
        //         }
        //     }

        //     ColumnLayout {
        //         CheckBox { id: opt2; text: qsTr("ÁπÅÁÆÄ„ÄÅÂºÇ‰ΩìËΩ¨Êç¢"); checked: true }
        //     }
        // }


        // ÊªöÂä®ËßÜÂõæÂå∫Âüü
        ScrollView {
            id: scrollView
            Layout.fillWidth: true
            Layout.fillHeight: true
            ScrollBar.vertical.policy: ScrollBar.AlwaysOn  // Á°Æ‰øùÂßãÁªàÊòæÁ§∫ÊªöÂä®Êù°

            ListView {
                id: listView
                anchors.fill: parent
                model: interf.proxyModel
                spacing: 2
                clip: true

                delegate: Rectangle {
                    id: delegateItem
                    width: listView.width
                    height: 60
                    color: mouseArea.pressed ? "#e0e0e0" : "white"

                    // ÁÇπÂáªÊïàÊûú
                    MouseArea {
                        id: mouseArea
                        anchors.fill: parent
                        onClicked: {
                            interf.searchById(model.col8)
                            popup_Poem.title    = model.col0
                            popup_Poem.author   = model.col1
                            popup_Poem.ju       = model.col2
                            popup_Poem.yan      = model.col3
                            popup_Poem.jushu    = model.col4
                            popup_Poem.ticai    = model.col5
                            popup_Poem.juind    = model.col6
                            popup_Poem.pz       = model.col7
                        }
                    }

                    RowLayout {
                        anchors.fill: parent
                        spacing: 10

                        // Â∑¶‰æßÂ§ßÂ≠ó‰Ωì
                        Text {
                            textFormat: Text.RichText
                            font.pixelSize: 20
                            font.bold: true
                            text: {
                                var str = ""
                                for (var i = 0; i < model.col2.length; ++i) {
                                    var c = model.col2.charAt(i)
                                    var color = model.col7.charAt(i) === "‰ªÑ" ? "#C55A11" : "#3B3838"
                                    str += "<span style='color:" + color + "'>" + c + "</span>"
                                }
                                return str
                            }
                            // text: listView.c_ju
                            Layout.fillHeight: true
                            Layout.preferredWidth: 140
                            verticalAlignment: Text.AlignVCenter
                        }

                        // Text {
                            // text: c_ju
                            // font.pixelSize: 20
                            // font.bold: true
                            // Layout.leftMargin: 10
                            // Layout.fillHeight: true
                            // Layout.preferredWidth: 140
                            // verticalAlignment: Text.AlignVCenter
                        // }

                        // Âè≥‰æß‰∏ä‰∏ãÂ∏ÉÂ±Ä
                        ColumnLayout {
                            Layout.fillWidth: true
                            Layout.fillHeight: true
                            spacing: 2

                            RowLayout {
                                Layout.fillWidth: true
                                Layout.fillHeight: true
                                Text {
                                    text: model.col1 + " „Ää" + model.col0 + "„Äã"
                                    font.pixelSize: 14
                                    font.bold: true
                                    color: "#444444"
                                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter
                                    Layout.fillHeight: true
                                }
                            }

                            RowLayout {
                                Layout.fillWidth: true
                                Layout.fillHeight: true
                                Text {
                                    text: qsTr("‰ΩìË£ÅÔºö") + model.col5
                                    font.pixelSize: 14
                                    color: "#444444"
                                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter
                                    Layout.preferredWidth: 80
                                    Layout.fillHeight: true
                                }
                                Text {
                                    text: "Á¨¨" + model.col6 + "/" + model.col4 + "Âè•"
                                    font.pixelSize: 14
                                    color: "#444444"
                                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter
                                    Layout.fillWidth: true
                                    Layout.fillHeight: true
                                }
                            }
                        }
                    }

                    // ÂàÜÂâ≤Á∫ø
                    Rectangle {
                        width: parent.width
                        height: 1
                        color: "#eee"
                        anchors.bottom: parent.bottom
                    }
                }
            }

        }

        // ËøõÂ∫¶Êù°‰∏éÁä∂ÊÄÅÊ†áÁ≠æ
        RowLayout {
            Layout.fillWidth: true
            // visible: bar.visible

            // ProgressBar {
            //     id: bar
            //     Layout.fillWidth: true
            //     value: 0.0
            // }

            Label {
                id: lab
                text: interf.labText
                horizontalAlignment: Text.AlignRight
            }

            Item {
                Layout.fillWidth: true
            }

            Button {
                flat: true
                text: "‚ÑπÔ∏è"
                font.family: "Noto Emoji"
                font.pixelSize: 23
                topPadding: 0
                bottomPadding: 0
                leftPadding: 0
                rightPadding: 0
                Layout.preferredWidth: root.text_default_height+12
                Layout.preferredHeight: root.text_default_height
                onClicked: {
                    popup_Info.open()
                }
            }

            Button {
                flat: true
                text: "‚öô"
                font.family: "Noto Emoji"
                font.pixelSize: 25
                topPadding: 0
                bottomPadding: 0
                leftPadding: 0
                rightPadding: 0
                Layout.preferredWidth: text_default_height+12
                Layout.preferredHeight: text_default_height
                onClicked: {
                    dialog_Settings.open()
                }
            }
        }
    }

    Popup {
        id: popup_Poem
        modal: true
        focus: true

        width: parent.width * 4 / 5
        anchors.centerIn: Overlay.overlay  // ‚úÖ ÂßãÁªàÂ±Ö‰∏≠

        // Êï∞ÊçÆÂ±ûÊÄß
        property string author: ""
        property string chulv: ""
        property string jushu: ""
        property string yan: ""
        property string title: ""
        property string ticai: ""
        property string ju: ""
        property string juind: ""
        property string pz: ""
        property var poem: null

        // ÂØåÊñáÊú¨ÂÜÖÂÆπÔºöÂ∞Ü ju Âä†Á≤ó
        property string richContent: {
            console.log(popup_Poem.yan + "Ë®Ä " + popup_Poem.ticai
            + "   Âá∫ÂæãÂ∫¶: " + poem["Âá∫ÂæãÂ∫¶"])
            const lines = []
            const regex = /[^Ôºå„ÄÇÔºüÔºÅÔºõ]+[Ôºå„ÄÇÔºüÔºÅÔºõ]/g
            const matches = popup_Poem.poem["ÂÖßÂÆπ"].match(regex) || []
            const maxGroup = 5

            let i = 0
            while (i < matches.length) {
                let current = matches[i]
                const endChar = current.slice(-1)

                // Case A: ÂΩìÂâçÊòØÈÄóÂè∑Ôºå‰∏ã‰∏ÄÂè•‰∏çÊòØÈÄóÂè∑ÁªìÂ∞æ ‚Üí ÂêàÂπ∂ i Âíå i+1
                if (endChar === "Ôºå" && i + 1 < matches.length && matches[i + 1].slice(-1) !== "Ôºå") {
                    current += matches[i + 1]
                    i += 2
                }
                // Case B: ËøûÁª≠Âè•ÈùûÂè•Âè∑ÁªìÂ∞æÔºåÊúÄÂ§öÂêàÂπ∂5Âè•ÔºåÁõ¥Âà∞Âè•Âè∑
                else {
                    let group = current
                    let j = i + 1
                    while (j < matches.length && j - i < maxGroup && matches[j - 1].slice(-1) !== "„ÄÇ" && matches[j].slice(-1) !== "„ÄÇ") {
                        group += matches[j]
                        j += 1
                    }
                    // Ê£ÄÊü•ÊòØÂê¶ÊúÄÂêé‰∏ÄÂè•ÊòØÂè•Âè∑ÁªìÂ∞æ
                    if (j < matches.length && matches[j].slice(-1) === "„ÄÇ") {
                        group += matches[j]
                        j += 1
                    }
                    current = group
                    i = j
                }

                lines.push(current)
            }
            let joined = lines.join("<br/>")
            if (popup_Poem.ju.length === 0) return joined
            return joined.replace(popup_Poem.ju, "<b>" + popup_Poem.ju + "</b>")
        }

        // Ëá™Âä®È´òÂ∫¶ÔºàÁî± Layout Ëá™Âä®ÂÜ≥ÂÆöÔºâ
        contentItem: ColumnLayout {
            anchors.fill: parent
            anchors.margins: 16
            spacing: 12

            // Á¨¨‰∏ÄÈÉ®ÂàÜÔºöÊ†áÈ¢òÔºåÂ±Ö‰∏≠ÊòæÁ§∫
            Text {
                text: popup_Poem.author + " „Ää" + popup_Poem.title + "„Äã"
                font.pixelSize: 14
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
                Layout.fillWidth: true
                wrapMode: Text.Wrap
            }


            // ÂèØÊªöÂä®ÊñáÊú¨Âå∫Âüü
            ScrollView {
                id: v_poem
                ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
                Layout.maximumHeight: root.height*1/2
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter
                // Á¨¨‰∫åÈÉ®ÂàÜÔºöÂØåÊñáÊú¨ÔºåËá™Âä®Êç¢Ë°åÔºåÈôêÂà∂ÂÆΩÂ∫¶
                Text {
                    textFormat: Text.RichText
                    text: popup_Poem.richContent
                    wrapMode: Text.Wrap
                    font.pixelSize: 16
                    width: v_poem.availableWidth
                    horizontalAlignment: Text.AlignHCenter
                }
            }

            Text {

                text: popup_Poem.yan + "Ë®Ä " + popup_Poem.ticai
                      + "   Âá∫ÂæãÂ∫¶: " + poem["Âá∫ÂæãÂ∫¶"]
                font.pixelSize: 16
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
                Layout.fillWidth: true
                Layout.preferredHeight: 20
                wrapMode: Text.Wrap
            }

            Text {
                text: popup_Poem.author + " „Ää" + popup_Poem.title + "„Äã"
                font.pixelSize: 14
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
                Layout.fillWidth: true
                wrapMode: Text.Wrap
            }
        }
    }

    Popup {
        id: popup_Info
        modal: true
        focus: true

        width: parent.width * 2 / 3
        anchors.centerIn: Overlay.overlay  // ‚úÖ ÂßãÁªàÂ±Ö‰∏≠

        // Ëá™Âä®È´òÂ∫¶ÔºàÁî± Layout Ëá™Âä®ÂÜ≥ÂÆöÔºâ
        contentItem: ColumnLayout {
            anchors.fill: parent
            anchors.margins: 16
            spacing: 12

            Label  {
                text: qsTr("‚ìò ÂÖ≥‰∫é")
                font.pixelSize: 24
                color: Material.accent
                horizontalAlignment: Text.AlignLeft
                Layout.alignment: Qt.AlignHCenter
                Layout.fillWidth: true
                wrapMode: Text.Wrap
            }

            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: 1
                color: "#cccccc" // ÂàÜÈöîÁ∫øÈ¢úËâ≤
            }

            Label  {
                text: qsTr("ËØóÂè•Ê£ÄÁ¥¢ v0.0.3\n2025.05.22\n\nDrail Ins.\n")
                font.pixelSize: 18
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
                Layout.fillWidth: true
                wrapMode: Text.Wrap
            }
        }
    }

    SettingsDialog {
        id: dialog_Settings
        modal: true
        focus: true

        appInterf: interf
        appTrDict: trDict
        appColDict: colDict

        width: parent.width * 4 / 5
        height: parent.height / 2
        anchors.centerIn: Overlay.overlay

        appSettings: settings

    }

    // Drawer {
    //     id: drawer
    //     width: root.width * 0.33
    //     height: root.height

    //     Column {
    //         anchors.fill: parent

    //         ItemDelegate {
    //             text: qsTr("Page 1")
    //             width: parent.width
    //             onClicked: {
    //                 stackView.push("Screen01.ui.qml")
    //                 drawer.close()
    //             }
    //         }
    //         ItemDelegate {
    //             text: qsTr("Page 2")
    //             width: parent.width
    //             onClicked: {
    //                 stackView.push("Screen02.ui.qml")
    //                 drawer.close()
    //             }
    //         }
    //     }
    // }
}

