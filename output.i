class AppSettings
{
public:
    explicit AppSettings(QObject *parent = nullptr);
    Q_PROPERTY(QString languageCode READ languageCode WRITE setLanguageCode NOTIFY languageCodeChanged) QString languageCode() const { return m_settings.value(QStringLiteral("Ui" "/" "languageCode"), "").value<QString>(); } void setLanguageCode(QString value) { if (value != languageCode()) { m_settings.setValue(QStringLiteral("Ui" "/" "languageCode"), value); emit languageCodeChanged(); } } Q_SIGNAL void languageCodeChanged();
    Q_PROPERTY(int theme READ theme WRITE setTheme NOTIFY themeChanged) int theme() const { return m_settings.value(QStringLiteral("Ui" "/" "theme"), 2).value<int>(); } void setTheme(int value) { if (value != theme()) { m_settings.setValue(QStringLiteral("Ui" "/" "theme"), value); emit themeChanged(); } } Q_SIGNAL void themeChanged();
    Q_PROPERTY(QVariantList sortFields READ sortFields WRITE setSortFields NOTIFY sortFieldsChanged) QVariantList sortFields() const { return m_settings.value(QStringLiteral("Sort" "/" "sortFields"), true).value<QVariantList>(); } void setSortFields(QVariantList value) { if (value != sortFields()) { m_settings.setValue(QStringLiteral("Sort" "/" "sortFields"), value); emit sortFieldsChanged(); } } Q_SIGNAL void sortFieldsChanged();
    Q_PROPERTY(bool strictJu READ strictJu WRITE setStrictJu NOTIFY strictJuChanged) bool strictJu() const { return m_settings.value(QStringLiteral("Query" "/" "strictJu"), false).value<bool>(); } void setStrictJu(bool value) { if (value != strictJu()) { m_settings.setValue(QStringLiteral("Query" "/" "strictJu"), value); emit strictJuChanged(); } } Q_SIGNAL void strictJuChanged();
    Q_PROPERTY(bool strictPz READ strictPz WRITE setStrictPz NOTIFY strictPzChanged) bool strictPz() const { return m_settings.value(QStringLiteral("Query" "/" "strictPz"), false).value<bool>(); } void setStrictPz(bool value) { if (value != strictPz()) { m_settings.setValue(QStringLiteral("Query" "/" "strictPz"), value); emit strictPzChanged(); } } Q_SIGNAL void strictPzChanged();
    Q_PROPERTY(bool strictTitle READ strictTitle WRITE setStrictTitle NOTIFY strictTitleChanged) bool strictTitle() const { return m_settings.value(QStringLiteral("Query" "/" "strictTitle"), true).value<bool>(); } void setStrictTitle(bool value) { if (value != strictTitle()) { m_settings.setValue(QStringLiteral("Query" "/" "strictTitle"), value); emit strictTitleChanged(); } } Q_SIGNAL void strictTitleChanged();
    Q_PROPERTY(bool strictAuthor READ strictAuthor WRITE setStrictAuthor NOTIFY strictAuthorChanged) bool strictAuthor() const { return m_settings.value(QStringLiteral("Query" "/" "strictAuthor"), true).value<bool>(); } void setStrictAuthor(bool value) { if (value != strictAuthor()) { m_settings.setValue(QStringLiteral("Query" "/" "strictAuthor"), value); emit strictAuthorChanged(); } } Q_SIGNAL void strictAuthorChanged();
    Q_PROPERTY(bool strictTicai READ strictTicai WRITE setStrictTicai NOTIFY strictTicaiChanged) bool strictTicai() const { return m_settings.value(QStringLiteral("Query" "/" "strictTicai"), true).value<bool>(); } void setStrictTicai(bool value) { if (value != strictTicai()) { m_settings.setValue(QStringLiteral("Query" "/" "strictTicai"), value); emit strictTicaiChanged(); } } Q_SIGNAL void strictTicaiChanged();
    Q_PROPERTY(bool variantSearch READ variantSearch WRITE setVariantSearch NOTIFY variantSearchChanged) bool variantSearch() const { return m_settings.value(QStringLiteral("Query" "/" "variantSearch"), true).value<bool>(); } void setVariantSearch(bool value) { if (value != variantSearch()) { m_settings.setValue(QStringLiteral("Query" "/" "variantSearch"), value); emit variantSearchChanged(); } } Q_SIGNAL void variantSearchChanged();
    Q_PROPERTY(bool dispPz READ dispPz WRITE setDispPz NOTIFY dispPzChanged) bool dispPz() const { return m_settings.value(QStringLiteral("Disp" "/" "dispPz"), true).value<bool>(); } void setDispPz(bool value) { if (value != dispPz()) { m_settings.setValue(QStringLiteral("Disp" "/" "dispPz"), value); emit dispPzChanged(); } } Q_SIGNAL void dispPzChanged();
signals:
private:
    QSettings m_settings;
};
